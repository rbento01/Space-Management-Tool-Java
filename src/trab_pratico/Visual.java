/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trab_pratico;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author bento
 */
public class Visual extends javax.swing.JFrame {

    //é a raiz da JTree, nesta classe o Index irá ser usado para mandar em parâmetro o caminho da raiz da árvore
    Index index;

    //vai conter a informação do ficheiro que vai ser a raiz da árvore
    File base;

    //vai criar um JFileChooser para o utilizador escolher e partir dessa escolha, construi interactivamente a raiz da árvore
    JFileChooser chooser = new JFileChooser();

    //vai conter a informação sobre a terminação requisitada pelo utilizador num JOptionPane
    Object result;

    /**
     * Creates new form VIsual
     *
     * @throws java.io.IOException
     */
    public Visual() throws IOException {
        //Inicia o JFrame Form
        initComponents();

        //Cria-se uma raiz com um File a partir de uma diretoria mandada em parâmetro
        MyTreeNode root = new MyTreeNode("Clique no 'Open File On JTree' botão para iniciar o programa", base);

        //Mostra os dados
        tree.setModel(new DefaultTreeModel(root));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panelTree = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        panelButtons = new javax.swing.JPanel();
        abreFile = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        zeroMesBut = new javax.swing.JRadioButton();
        tresMesBut = new javax.swing.JRadioButton();
        seisMesBut = new javax.swing.JRadioButton();
        dozeMesBut = new javax.swing.JRadioButton();
        pesqTermBut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelTree.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 102)));

        jScrollPane1.setViewportView(tree);

        javax.swing.GroupLayout panelTreeLayout = new javax.swing.GroupLayout(panelTree);
        panelTree.setLayout(panelTreeLayout);
        panelTreeLayout.setHorizontalGroup(
            panelTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelTreeLayout.setVerticalGroup(
            panelTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelButtons.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 255, 102)));

        abreFile.setText("Open File On JTree");
        abreFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abreFileActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete ");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(zeroMesBut);
        zeroMesBut.setSelected(true);
        zeroMesBut.setText("0 Meses");
        zeroMesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroMesButActionPerformed(evt);
            }
        });

        buttonGroup1.add(tresMesBut);
        tresMesBut.setText("3 Meses");
        tresMesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tresMesButActionPerformed(evt);
            }
        });

        buttonGroup1.add(seisMesBut);
        seisMesBut.setText("6 Meses");
        seisMesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seisMesButActionPerformed(evt);
            }
        });

        buttonGroup1.add(dozeMesBut);
        dozeMesBut.setText("12 Meses");
        dozeMesBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dozeMesButActionPerformed(evt);
            }
        });

        pesqTermBut.setText("Pesquisar por terminação");
        pesqTermBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesqTermButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelButtonsLayout = new javax.swing.GroupLayout(panelButtons);
        panelButtons.setLayout(panelButtonsLayout);
        panelButtonsLayout.setHorizontalGroup(
            panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(abreFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pesqTermBut, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelButtonsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(zeroMesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seisMesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dozeMesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tresMesBut, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelButtonsLayout.setVerticalGroup(
            panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonsLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(abreFile, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelButtonsLayout.createSequentialGroup()
                        .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zeroMesBut)
                            .addComponent(tresMesBut))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seisMesBut)
                            .addComponent(dozeMesBut)))
                    .addComponent(pesqTermBut, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abreFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abreFileActionPerformed
        // TODO add your handling code here:
        try {
            //Só se pode escolher diretorias no JFile Chooser
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            //Mostra o JFile Chooser
            chooser.showOpenDialog(this);

            //Vai guardar a diretoria selecionada num File
            base = chooser.getSelectedFile();

            //A diretoria selecionado vai ser a raiz da árvore
            MyTreeNode root = new MyTreeNode(base.getName(), base);

            //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
            index = new Index(base.getAbsolutePath());

            //Cria-se a JTree sem restrição
            index.createTreeMes(root, 0);

            //Mostra os dados na JTree
            tree.setModel(new DefaultTreeModel(root));

        } catch (IOException | java.lang.NullPointerException ex) {
        }
    }//GEN-LAST:event_abreFileActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        //Vai obter todos os ficheiros selecionados na JTree
        TreePath selected[] = tree.getSelectionPaths();

        //Vai iterar o for quantos ficheiros ou diretorias o ficheiro selecionou
        for (TreePath i : selected) {
            //Vai obter o caminho dos ficheiros/diretorias selecionados 
            Object[] paths = i.getPath();

            //Vai obter a diretoria do(s) ficheiro(s) selecionado(s)
            File file = ((MyTreeNode) paths[paths.length - 1]).file;

            //Se o utilizador colocou na opção de Sim para o JOption Pane que questiona o utilizador se tem a certeza se quer apagar
            if (askConfirm() == JOptionPane.YES_OPTION) {
                //Vai apagar recursivamente os ficheiros selecionados
                deleteFile(file);

                //Vai obter a TreePath da diretoria-pai dos ficheiros-filhos selecionados
                TreePath test = i.getParentPath();

                //Vai obter a Row da diretoria-pai
                int aux = tree.getRowForPath(test);
                try {
                    //Se tem a restrição de mês 0
                    if (zeroMesBut.isSelected()) {
                        //Ao apagar um ficheiro/diretoria a JTree atualiza imediatemente após, mantendo as mesmas restrição já feitas
                        buildTree(base, aux, 0, result);
                        //Se tem a restrição de mês 3
                    } else if (tresMesBut.isSelected()) {
                        //Ao apagar um ficheiro/diretoria a JTree atualiza imediatemente após, mantendo as mesmas restrição já feitas
                        buildTree(base, aux, 3, result);
                        //Se tem a restrição de mês 6
                    } else if (seisMesBut.isSelected()) {
                        //Ao apagar um ficheiro/diretoria a JTree atualiza imediatemente após, mantendo as mesmas restrição já feitas
                        buildTree(base, aux, 6, result);
                        //Se tem a restrição de mês 12
                    } else if (dozeMesBut.isSelected()) {
                        //Ao apagar um ficheiro/diretoria a JTree atualiza imediatemente após, mantendo as mesmas restrição já feitas
                        buildTree(base, aux, 12, result);
                    }

                } catch (IOException | java.lang.NullPointerException ex) {
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void zeroMesButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroMesButActionPerformed
        // TODO add your handling code here:
        //Se tem o botão de 0 meses selecionada e colocou uma terminação
        if (zeroMesBut.isSelected() && result != null) {
            try {

                //Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMesTerm(root, 0, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException | java.lang.NullPointerException ex) {
            }
            //Se tem só o botão do mês selecionado e ainda não colocou uma terminação
        } else {
            try {//Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMes(root, 0);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_zeroMesButActionPerformed

    private void tresMesButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tresMesButActionPerformed
        // TODO add your handling code here:
        if (tresMesBut.isSelected() && result != null) {
            try {

                //Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMesTerm(root, 3, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException | java.lang.NullPointerException ex) {
            }
            //Se tem só o botão do mês selecionado e ainda não colocou uma terminação
        } else {
            try {//Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMes(root, 3);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_tresMesButActionPerformed

    private void seisMesButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seisMesButActionPerformed
        // TODO add your handling code here:
        if (seisMesBut.isSelected() && result != null) {
            try {

                //Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMesTerm(root, 6, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException | java.lang.NullPointerException ex) {
            }
            //Se tem só o botão do mês selecionado e ainda não colocou uma terminação
        } else {
            try {//Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMes(root, 6);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_seisMesButActionPerformed

    private void dozeMesButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dozeMesButActionPerformed
        // TODO add your handling code here:
        if (dozeMesBut.isSelected() && result != null) {
            try {

                //Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMesTerm(root, 12, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException | java.lang.NullPointerException ex) {
            }
            //Se tem só o botão do mês selecionado e ainda não colocou uma terminação
        } else {
            try {//Só se pode escolher diretorias no JFile Chooser
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                //Mostra o JFile Chooser
                chooser.showOpenDialog(this);

                //Vai guardar a diretoria selecionada num File
                base = chooser.getSelectedFile();

                //A diretoria selecionado vai ser a raiz da árvore
                MyTreeNode root = new MyTreeNode(base.getName(), base);

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(base.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminação
                index.createTreeMes(root, 12);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_dozeMesButActionPerformed

    private void pesqTermButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesqTermButActionPerformed
        try {
            //O Object result vai ter o texto que o utilizador escreveu no JOptionPane
            result = JOptionPane.showInputDialog(this, "Insira a terminação:");

            //Só se pode escolher diretorias no JFile Chooser
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            //Mostra o JFile Chooser
            chooser.showOpenDialog(this);

            //Vai guardar a diretoria selecionada num File
            base = chooser.getSelectedFile();

            //A diretoria selecionado vai ser a raiz da árvore
            MyTreeNode root = new MyTreeNode(base.getName(), base);

            //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
            index = new Index(base.getAbsolutePath());

            //Vai criar a árvore com a restrição da terminação
            index.createTreeTerm(root, (String) result);

            //Mostra os dados na JTree
            tree.setModel(new DefaultTreeModel(root));

        } catch (IOException | java.lang.NullPointerException ex) {
        }


    }//GEN-LAST:event_pesqTermButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Visual().setVisible(true);
            } catch (IOException | java.lang.NullPointerException ex) {
                Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    private int askConfirm() {
        // Ask the user whether he/she wants to confirm deleting
        // Return the option chosen by the user either YES/NO
        return JOptionPane.showConfirmDialog(this, "Are you sure want to delete this file/directory?", "Confirm", JOptionPane.YES_NO_OPTION);
    }

    private void buildTree(File base, int aux, int indexMes, Object result) throws IOException {
        //Vai obter o raiz da JTree no formato File
        File sym = new File(base.getAbsolutePath());

        //Vai passar para o MyTreeNode a base da árvore
        MyTreeNode root = new MyTreeNode(sym.getName(), sym);
        try {
            //Se tiver selecionado a restrição de 0 meses e não tem a restrição de terminação
            if (indexMes == 0 && result == null) {

                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês
                index.createTreeMes(root, indexMes);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);
                //Se tiver selecionado a restrição de 0 meses e tem a restrição de terminação    
            } else if (indexMes == 0 && result != null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminção
                index.createTreeMesTerm(root, indexMes, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);

                //Se tiver selecionado a restrição de 3 meses e não tem a restrição de terminação 
            } else if (indexMes == 3 && result == null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês
                index.createTreeMes(root, indexMes);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);
                //Se tiver selecionado a restrição de 0 meses e tem a restrição de terminação 

            } else if (indexMes == 3 && result != null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminção
                index.createTreeMesTerm(root, indexMes, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);

                //Se tiver selecionado a restrição de 6 meses e não tem a restrição de terminação   
            } else if (indexMes == 6 && result == null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês
                index.createTreeMes(root, indexMes);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);

                //Se tiver selecionado a restrição de 0 meses e tem a restrição de terminação    
            } else if (indexMes == 6 && result != null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminção
                index.createTreeMesTerm(root, indexMes, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);

                //Se tiver selecionado a restrição de 12 meses e não tem a restrição de terminação      
            } else if (indexMes == 12 && result == null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês
                index.createTreeMes(root, indexMes);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);

                //Se tiver selecionado a restrição de 0 meses e tem a restrição de terminação 
            } else if (indexMes == 12 && result != null) {
                //Vai obter o path da raiz da árvore, e usa-se o construtor para criar os sub files da diretoria pai
                index = new Index(sym.getAbsolutePath());

                //Vai criar a árvore com a restrição do mês e da terminção
                index.createTreeMesTerm(root, indexMes, (String) result);

                //Mostra os dados na JTree
                tree.setModel(new DefaultTreeModel(root));

                //expande a diretoria-pai dos ficheiros que apagou
                tree.expandRow(aux);
            }
        } catch (java.lang.NullPointerException exc) {
            System.out.println("Pasta inválida");
        }
    }

    public void deleteFile(File file) {
        //Se for o utilizador clicou nas diretorias
        if (file.isDirectory()) {
            //Vai iterar este for quando ficheiros tiver dentro da diretoria 
            for (File sub : file.listFiles()) {
                //Vai apagar ficheiro a ficheiro
                deleteFile(sub);
            }
        }
        //Se já apagou tudo, apaga a diretoria, no entanto se for um ficheiro apaga imediatamente o ficheiro 
        file.delete();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abreFile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JRadioButton dozeMesBut;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JPanel panelTree;
    private javax.swing.JButton pesqTermBut;
    private javax.swing.JRadioButton seisMesBut;
    private javax.swing.JTree tree;
    private javax.swing.JRadioButton tresMesBut;
    private javax.swing.JRadioButton zeroMesBut;
    // End of variables declaration//GEN-END:variables
}
